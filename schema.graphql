# source: http://localhost:4000
# timestamp: Tue May 05 2020 09:45:32 GMT-0700 (Pacific Daylight Time)

directive @cacheControl(maxAge: Int, scope: CacheControlScope) on FIELD_DEFINITION | OBJECT | INTERFACE

type Article {
  id: ID!
  title: String!
  summary: String
  content: String
  headerImage: ArticleHeaderImage
  author: User!
  category: String
  comments: [Comment]
  likes: Int!
  wordCount: Int!
  createdAt: String!
  updatedAt: String!
  publishedAt: String
  deletedAt: String
  userId: String!
  subscribersOnly: Boolean!
  slug: String
  contentBlocked: Boolean
}

type ArticleHeaderImage {
  id: ID!
  url: String!
  downloadUrl: String
  photographerName: String
  photographerUrl: String
}

input ArticleHeaderImageInput {
  id: ID!
  url: String!
  downloadUrl: String
  photographerName: String
  photographerUrl: String
}

type ArticlesPayload {
  articlesWithHeader: [Article]
  articlesWithoutHeader: [Article]
  headerCursor: String
  headlessCursor: String
}

enum AuthLink {
  passwordReset
  emailVerification
}

enum CacheControlScope {
  PUBLIC
  PRIVATE
}

input CancelSubscriptionInput {
  id: ID!
}

type CancelSubscriptionPayload {
  id: ID!
}

enum Category {
  arts
  books
  business
  creative_writing
  fiction
  health
  opinion
  philosophy
  politics
  psychology
  relationships
  science
  self
  technology
  travel
}

type Comment {
  id: ID!
  userId: String!
  user: User!
  resourceId: String!
  resource: Article!
  message: String!
  parentId: String
  replies: [Comment]
  likes: Int!
  createdAt: String!
  updatedAt: String!
  deletedAt: String!
}

input ConnectStripeAccountInput {
  userId: String!
  authCode: String!
}

type ConnectStripeAccountPayload {
  success: Boolean!
}

input CreateCommentInput {
  message: String!
  resourceId: String!
  parentId: String
}

type CreateCommentPayload {
  id: ID!
  message: String!
  createdAt: String!
}

input CreateOrUpdateArticleInput {
  id: ID
  title: String
  summary: String
  content: String
  headerImage: ArticleHeaderImageInput
  createdAt: String
  updatedAt: String
  userId: String
  subscribersOnly: Boolean
  wordCount: Int
  category: String
}

type CreateOrUpdateArticlePayload {
  id: ID!
}

input CreateProfileSectionInput {
  title: String!
  content: String!
  headerImage: ArticleHeaderImageInput
}

type CreateProfileSectionPayload {
  id: ID!
}

input CreateStripeSessionInput {
  amount: Int
  plan: StripePlanInput
  redirectUrl: String!
  stripeUserId: String!
  authorId: String!
}

type CreateStripeSessionPayload {
  id: ID!
}

input CreateSubscriptionInput {
  stripeUserId: String!
  stripeSubscriptionId: String!
  authorId: String!
}

type CreateSubscriptionPayload {
  id: ID!
  stripeSubscriptionId: String!
  createdAt: String!
}

input CreateUserInput {
  id: ID!
  email: String!
  firstName: String!
  lastName: String
}

type CreateUserPayload {
  id: ID!
  username: String!
}

input DeleteArticleInput {
  id: ID!
}

type DeleteArticlePayload {
  id: ID!
}

input DeleteCommentInput {
  id: ID!
}

type DeleteCommentPayload {
  id: ID!
  deletedAt: String!
}

input DeleteProfileSectionInput {
  id: ID!
}

type DeleteProfileSectionPayload {
  id: ID!
  deletedAt: String!
}

type Feed {
  id: String
  next: String!
  results: [FeedItem]!
  unseen: Int!
  unread: Int!
}

type FeedActivity {
  id: ID!
  actor: User!
  verb: String!
  time: String!
  object: FeedActivityObject
}

union FeedActivityObject = Article | Comment | User

type FeedItem {
  id: ID!
  is_read: Boolean!
  is_seen: Boolean!
  verb: String!
  actor_count: Int!
  activities: [FeedActivity]!
}

input FollowUserInput {
  userId: String!
}

type FollowUserPayload {
  userId: String!
}

type Mutation {
  createOrUpdateArticle(input: CreateOrUpdateArticleInput!): CreateOrUpdateArticlePayload!
  createArticle(input: CreateOrUpdateArticleInput!): CreateOrUpdateArticlePayload!
  updateArticle(input: CreateOrUpdateArticleInput!): CreateOrUpdateArticlePayload!
  publishArticle(input: PublishArticleInput!): PublishArticlePayload!
  deleteArticle(input: DeleteArticleInput!): DeleteArticlePayload!
  createUser(input: CreateUserInput!): CreateUserPayload!
  updateUser(input: UpdateUserInput!): UpdateUserPayload!
  connectStripeAccount(input: ConnectStripeAccountInput!): ConnectStripeAccountPayload!
  createStripeSession(input: CreateStripeSessionInput!): CreateStripeSessionPayload!
  createSubscription(input: CreateSubscriptionInput!): CreateSubscriptionPayload!
  cancelSubscription(input: CancelSubscriptionInput!): CancelSubscriptionPayload!
  followUser(input: FollowUserInput!): FollowUserPayload!
  unfollowUser(input: UnfollowUserInput!): UnfollowUserPayload!
  createComment(input: CreateCommentInput!): CreateCommentPayload!
  updateComment(input: UpdateCommentInput!): UpdateCommentPayload!
  deleteComment(input: DeleteCommentInput!): DeleteCommentPayload!
  uploadImage(input: UploadImageInput!): UploadImagePayload!
  createProfileSection(input: CreateProfileSectionInput!): CreateProfileSectionPayload!
  updateProfileSection(input: UpdateProfileSectionInput!): UpdateProfileSectionPayload!
  deleteProfileSection(input: DeleteProfileSectionInput!): DeleteProfileSectionPayload!
}

type Plan {
  id: ID!
  amount: Int!
  currency: String!
  interval: String!
}

type ProfileFeed {
  id: String
  next: String!
  results: [FeedActivity]!
}

type ProfileSection {
  id: ID!
  title: String!
  content: String
  headerImage: ArticleHeaderImage
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  userId: String!
}

input PublishArticleInput {
  id: ID!
  article: CreateOrUpdateArticleInput
}

type PublishArticlePayload {
  id: ID!
  slug: String!
}

type Query {
  articles(category: String, headerCursor: String, headlessCursor: String): ArticlesPayload
  article(id: ID!): Article
  articleBySlug(slug: String!): Article
  articlesByUser(userId: ID!, drafts: Boolean): [Article]
  authLink(type: AuthLink!, email: String!): String
  commentsByResourceId(resourceId: ID!): [Comment]
  feed: Feed
  profileFeed(userId: ID): ProfileFeed
  stripeSession(id: ID!, stripeUserId: ID!, authorId: ID!): StripeSession!
  profileSection(id: ID!): ProfileSection
  profileSections(userId: ID!): [ProfileSection]
  subscription(id: ID!): Subscription!
  user(username: String!): User
  unsplashPhoto(search: String): [UnsplashPhoto]
}

type StripePlan {
  id: ID!
  amount: Int
  currency: String!
  interval: String!
}

input StripePlanInput {
  id: ID!
  amount: Int
  currency: String!
  interval: String!
}

type StripeSession {
  id: ID!
  status: String
  subscription: String
}

type Subscription {
  id: ID!
  stripeSubscriptionId: String!
  authorId: String!
  author: User!
  userId: String!
  status: String!
  currentPeriodEnd: Int!
  cancelAt: Int
  createdAt: String!
  updatedAt: String!
  deletedAt: String
  plan: Plan!
  customerEmai: String
}

input UnfollowUserInput {
  userId: String!
}

type UnfollowUserPayload {
  userId: String!
}

type UnsplashPhoto {
  id: ID!
  urls: UnsplashPhotoURLs!
  photographerName: String!
  photographerUrl: String!
}

type UnsplashPhotoURLs {
  raw: String!
  full: String!
  regular: String!
  small: String!
  thumb: String!
  download_location: String!
}

input UpdateCommentInput {
  id: ID!
  message: String!
}

type UpdateCommentPayload {
  id: ID!
  updatedAt: String!
}

input UpdateProfileSectionInput {
  id: ID!
  title: String!
  content: String!
  headerImage: ArticleHeaderImageInput
}

type UpdateProfileSectionPayload {
  id: ID!
}

input UpdateUserInput {
  id: ID!
  firstName: String!
  lastName: String
  username: String!
  email: String!
}

type UpdateUserPayload {
  id: ID!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UploadImageInput {
  name: String!
  type: String!
  content: String!
}

type UploadImagePayload {
  url: String!
}

type User {
  id: ID!
  firstName: String!
  lastName: String
  username: String!
  email: String!
  profileImageURL: String
  following: [User]
  followingIds: [String]
  followers: [User]
  followerIds: [String]
  subscribers: [String]
  subscriptions: [Subscription]
  createdAt: String!
  updatedAt: String!
  stripeUserId: String
  stripePlanId: String
  stripePlan: StripePlan
  profileSections: [ProfileSection]
}
